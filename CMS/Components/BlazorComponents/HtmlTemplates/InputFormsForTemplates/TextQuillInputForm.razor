@using CMS.Components.BlazorComponents.HtmlTemplates
@using CMS.Data
@using CMS.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using System.Threading.Tasks
@using Newtonsoft.Json

@rendermode InteractiveServer

@namespace BlazorComponents.HtmlTemplates.InputFormsForTemplates
@inject IGetCurrentUserService GetCurrentUserService
@inject IContentService ContentService
@inherits BaseTextTemplateQuill //gets the base parameters we have in every template/inputform

@inject IJSRuntime JSRuntime

<h4>Text</h4>

<div>
    <form>
        <div>
            <label>Namn</label>
            <input type="text" @bind="ContentName" placeholder="Enter name for content" class="form-control" />

            <!-- Quill editor placeholder -->
            <div id="toolbar-container">
                <span class="ql-formats">
                    <select class="ql-font"></select>
                    <select class="ql-size"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-script" value="sub"></button>
                    <button class="ql-script" value="super"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-header" value="1"></button>
                    <button class="ql-header" value="2"></button>
                    <button class="ql-blockquote"></button>
                    <button class="ql-code-block"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                    <button class="ql-indent" value="-1"></button>
                    <button class="ql-indent" value="+1"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-direction" value="rtl"></button>
                    <select class="ql-align"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </div>
            <div id="quill-editor" style="height: 200px; background-color: white;"></div>

        </div>

        <div style="margin-top: 10px;">
            @if (!MultiPageMode) // Show button only if not in multi-page mode
            {
                <button type="button" class="btn btn-outline-primary" @onclick="SaveToDatabase">Spara</button>
            }
        </div>
    </form>

    <!-- Success message -->
    @if (saveSuccessful)
    {
        <div class="alert alert-success" role="alert" style="margin-top: 20px;">
            Text sparad.
        </div>
    }
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private bool hasSaved = false; // Flag to track if save has been executed
    [Parameter] public bool SaveBtnClicked { get; set; } // New parameter to handle save button state
    [Parameter] public bool MultiPageMode { get; set; } // Receive MultiPageMode parameter

    private bool saveSuccessful = false;  // New flag to show the success message

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Quill editor using JavaScript after the page is rendered
            await JSRuntime.InvokeVoidAsync("initializeQuillEditor");

            // Set the existing content in the Quill editor if it exists (edit mode)
            if (!string.IsNullOrEmpty(QuillContent))
            {
                // Use JSInterop to set the Quill content
                await JSRuntime.InvokeVoidAsync("setQuillContent", QuillContent);
            }
        }
    }


    protected override void OnParametersSet()
    {
        if (SaveBtnClicked && !hasSaved) // Check if SaveBtnClicked and save hasn't been executed yet
        {
            SaveToDatabase(); // Call the save method
            hasSaved = true; // Set the flag to prevent further saves
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Load content only if ContentId exists (edit mode)
        if (ContentId.HasValue)
        {
            await LoadExistingContent(ContentId.Value);
        }
    }

    // A class representing the structure of the JSON data stored in the database
    private class ContentData
    {
        public string QuillContent = string.Empty;
    }

    private async Task LoadExistingContent(int contentId)
    {
        var existingContent = await ContentService.GetContentAsync(contentId);

        if (existingContent != null)
        {
            // Pre-fill form fields with existing content data
            ContentName = existingContent.ContentName;

            // Deserialize the ContentJson field to extract additional form data
            if (!string.IsNullOrEmpty(existingContent.ContentJson))
            {
                var contentData = JsonConvert.DeserializeObject<ContentData>(existingContent.ContentJson);
                QuillContent = contentData.QuillContent;
            }
        }
    }

    // private async Task SaveToDatabase()
    // {
    //     // Get Quill content via JSInterop before saving
    //     QuillContent = await JSRuntime.InvokeAsync<string>("getQuillContent");

    //     var user = await GetCurrentUserService.GetCurrentUserAsync();

    //     var contentData = new ContentData
    //         {
    //             QuillContent = QuillContent
    //         };

    //     var content = new Content
    //         {
    //             UserId = user.Id,
    //             ContentName = ContentName,
    //             WebPageId = WebPageId,
    //             CreationDate = DateOnly.FromDateTime(DateTime.Now),
    //             LastUpdated = DateOnly.FromDateTime(DateTime.Now),
    //             ContentJson = JsonConvert.SerializeObject(contentData),
    //             TemplateId = TemplateId,
    //         };

    //     // Save or update content based on ContentId presence
    //     if (ContentId.HasValue)
    //     {
    //         content.ContentId = ContentId.Value;
    //         await ContentService.UpdateContentAsync(content);
    //     }
    //     else
    //     {
    //         await ContentService.SaveContentAsync(content);
    //     }

    //     saveSuccessful = true;
    // }

    private async Task SaveToDatabase()
    {
        // Get Quill content via JSInterop before saving
        QuillContent = await JSRuntime.InvokeAsync<string>("getQuillContent");

        var user = await GetCurrentUserService.GetCurrentUserAsync();

        // Prepare the content data
        var contentData = new ContentData
        {
            QuillContent = QuillContent
        };

        var content = new Content
        {
            UserId = user.Id,
            ContentName = ContentName,
            WebPageId = WebPageId,
            CreationDate = DateOnly.FromDateTime(DateTime.Now),
            LastUpdated = DateOnly.FromDateTime(DateTime.Now),
            ContentJson = JsonConvert.SerializeObject(contentData),
            TemplateId = TemplateId
        };

        // Check if we are creating new content or updating existing content
        if (ContentId.HasValue)
        {
            // Update existing content
            content.ContentId = ContentId.Value;

            // Load existing content to preserve the RenderingOrderPosition
            var existingContent = await ContentService.GetContentAsync(ContentId.Value);
            if (existingContent != null)
            {
                // Preserve the existing RenderingOrderPosition during the update
                content.RenderingOrderPosition = existingContent.RenderingOrderPosition;
            }

            await ContentService.UpdateContentAsync(content);
        }
        else
        {
            // Creating new content: Get the next rendering order position
            int nextRenderingOrderPosition = await ContentService.GetNextRenderingOrderAsync(WebPageId);
            content.RenderingOrderPosition = nextRenderingOrderPosition;

            await ContentService.SaveContentAsync(content);
        }

        saveSuccessful = true;
    }

}

<script>
    window.initializeQuillEditor = function () {
        var quill = new Quill('#quill-editor', {
            modules: {
                syntax: true,
                toolbar: '#toolbar-container',
            },
            placeholder: 'Lägg till text här',
            theme: 'snow',
        });
        window.quillEditor = quill;
    };

    window.getQuillContent = function () {
        return window.quillEditor.root.innerHTML;
    };

    window.setQuillContent = function (content) {
        // Safely set the content in the Quill editor
        window.quillEditor.root.innerHTML = content;
    };

</script>

