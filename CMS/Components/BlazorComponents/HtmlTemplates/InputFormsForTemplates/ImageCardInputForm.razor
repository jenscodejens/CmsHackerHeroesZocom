@using CMS.Components.BlazorComponents.HtmlTemplates
@using CMS.Data
@using CMS.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using System.Threading.Tasks
@using Newtonsoft.Json

@namespace BlazorComponents.HtmlTemplates.InputFormsForTemplates
@inject IGetCurrentUserService GetCurrentUserService
@inject IContentService ContentService
@inherits BaseImageCardTemplate //gets the base parameters we have in every template/inputform

<h4>Bildkort</h4>

<div>
    <form>
        <div>
            <label style="margin-right: 55px;">Namn</label>
            <input type="text" @bind="ContentName" placeholder="Innehålls namn" />
            <br>
            <label style="margin-right: 26px;">Bilds URL</label>
            <input type="text" @bind="ImageInput" placeholder="Enter Image URL" />
            <br>
            <label style="margin-right: 30px;">Korts titel</label>
            <input type="text" @bind="CardTitle" placeholder="Kort Titel" />
            <br>
             <label>Underrubrik 1</label>
            <input type="text" @bind="CardText1" placeholder="Underrubrik 1" />
            <br>
            <label>Underrubrik 2</label>
            <input type="text" @bind="CardText2" placeholder="Unterrubrik 2" />
        </div>

        <div>
            <!--Color Controls -->
            <label>Bakgrundsfärg:</label>
            <br>
            <input type="color" @bind="BackgroundColor" />
            <br>
            <label>Textfärg:</label>
            <br>
            <input type="color" @bind="TextColor" />
        </div>

        <div style="margin-top: 10px;">
            <button class="btn btn-outline-info" style=" margin-right:5px; "type="button" @onclick="PreviewImage">Förhandsgranska</button>
            @if (!MultiPageMode) // Show button only if not in multi-page mode
            {
                <button class="btn btn-outline-primary" type="button" @onclick="SaveToDatabase">Spara</button>
            }
        </div>
    </form>

    <!-- Success message -->
    @if (saveSuccessful)
    {
        <div class="alert alert-success" role="alert" style="margin-top: 20px;">
            Bildkort sparat.
        </div>
    }
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private bool hasSaved = false; // Flag to track if save has been executed
    [Parameter] public bool SaveBtnClicked { get; set; } // New parameter to handle save button state
    [Parameter] public bool MultiPageMode { get; set; } // Receive MultiPageMode parameter

    private bool saveSuccessful = false;  // New flag to show the success message

    // A class representing the structure of the JSON data stored in the database
    private class ContentData
    {
        public string ImageInput { get; set; } = string.Empty;
        public string CardTitle { get; set; } = string.Empty;
        public string CardText1 { get; set; } = string.Empty;
        public string CardText2 { get; set; } = string.Empty;
        public string BackgroundColor { get; set; } = string.Empty;
        public string TextColor { get; set; } = string.Empty;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SaveBtnClicked && !hasSaved) // Check if SaveBtnClicked and save hasn't been executed yet
        {
            SaveToDatabase(); // Call the save method
            hasSaved = true; // Set the flag to prevent further saves
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Load content only if ContentId exists (edit mode)
        if (ContentId.HasValue)
        {
            await LoadExistingContent(ContentId.Value);
            PreviewImage();
        }
    }


    private async Task LoadExistingContent(int contentId)
    {
        var existingContent = await ContentService.GetContentAsync(contentId);

        if (existingContent != null)
        {
            // Pre-fill form fields with existing content data
            ContentName = existingContent.ContentName;

            // Deserialize the ContentJson field to extract additional form data
            if (!string.IsNullOrEmpty(existingContent.ContentJson))
            {
                var contentData = JsonConvert.DeserializeObject<ContentData>(existingContent.ContentJson);

                // Set form fields with the deserialized data
                ImageInput = contentData.ImageInput;
                CardTitle = contentData.CardTitle;
                CardText1 = contentData.CardText1;
                CardText2 = contentData.CardText2;
                BackgroundColor = contentData.BackgroundColor;
                TextColor = contentData.TextColor;
            }
        }
    }

    private async Task PreviewImage()
    {

        // Mapping section to pass form values to a parent component or handler
        var formValues = new Dictionary<string, object>
        {
            { "ContentName", ContentName },
            { "ImageInput", ImageInput },
            { "CardTitle", CardTitle },
            { "CardText1", CardText1 },
            { "CardText2", CardText2 },
            { "Backgroundcolor", BackgroundColor },
            { "TextColor", TextColor }
        };

        await OnSubmit.InvokeAsync(formValues);
    }

    // Save all inputs to the database when the "Save" button is clicked
    private async Task SaveToDatabase()
    {

        var user = await GetCurrentUserService.GetCurrentUserAsync();

        // Get the next rendering order position for the specified WebPageId
        int nextRenderingOrderPosition = await ContentService.GetNextRenderingOrderAsync(WebPageId);

        var contentData = new ContentData
        {
                ImageInput = ImageInput,
                CardTitle = CardTitle,
                CardText1 = CardText1,
                CardText2 = CardText2,
                BackgroundColor = BackgroundColor,
                TextColor = TextColor,
        };

        var content = new Content
        {
                UserId = user.Id,
                ContentName = ContentName,
                WebPageId = WebPageId,
                CreationDate = DateOnly.FromDateTime(DateTime.Now),
                LastUpdated = DateOnly.FromDateTime(DateTime.Now),
                ContentJson = JsonConvert.SerializeObject(contentData),
                TemplateId = TemplateId,
                RenderingOrderPosition = nextRenderingOrderPosition // Assign the next rendering order position here
        };


        // Save or update content based on ContentId presence
        if (ContentId.HasValue)
        {
            content.ContentId = ContentId.Value;
            await ContentService.UpdateContentAsync(content);
        }
        else
        {
            await ContentService.SaveContentAsync(content);
        }

        saveSuccessful = true;
    }

    // Navigate to the contents page after saving
    private void Done()
    {
        NavigationManager.NavigateTo($"/contents?webpageid={WebPageId}");
    }
}
