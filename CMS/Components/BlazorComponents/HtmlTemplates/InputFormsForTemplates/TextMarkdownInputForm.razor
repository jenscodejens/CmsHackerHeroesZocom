@using CMS.Components.BlazorComponents.HtmlTemplates
@using CMS.Data
@using CMS.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using System.Threading.Tasks
@using Newtonsoft.Json

@rendermode InteractiveServer

@namespace BlazorComponents.HtmlTemplates.InputFormsForTemplates
@inject IGetCurrentUserService GetCurrentUserService
@inject IContentService ContentService
@inherits BaseTextTemplateMarkdown //gets the base parameters we have in every template/inputform

<h4>Text</h4>

<div>
    <form>
        <div>
            <label>Namn</label>
            <input type="text" @bind="ContentName" placeholder="Enter name for content" class="form-control" />

            <!-- Markdown Text Editor -->
            <label>Text:</label>
            <MarkdownEditor @bind-Value="MarkdownContent" SpellChecker="false">
                <Toolbar>
                    <MarkdownToolbarButton Action="MarkdownAction.Bold" Icon="fa fa-bold" Title="Bold" />
                    <MarkdownToolbarButton Action="MarkdownAction.Italic" Icon="fa fa-italic" Title="Italic" />
                    <MarkdownToolbarButton Action="MarkdownAction.Code" Icon="fa fa-code" Title="Code" />
                    <MarkdownToolbarButton Action="MarkdownAction.Heading" Icon="fa fa-header" Title="Heading" />
                    <MarkdownToolbarButton Action="MarkdownAction.UnorderedList" Icon="fa fa-list-ul" Title="Unordered List" />
                    <MarkdownToolbarButton Action="MarkdownAction.OrderedList" Icon="fa fa-list-ol" Title="Ordered List" />
                </Toolbar>
            </MarkdownEditor>
        </div>

        <div style="margin-top: 10px;">
            @if (!MultiPageMode) // Show button only if not in multi-page mode
            {
                <button type="button" class="btn btn-outline-primary" @onclick="SaveToDatabase">Spara</button>
            }
        </div>
    </form>

    <!-- Success message -->
    @if (saveSuccessful)
    {
        <div class="alert alert-success" role="alert" style="margin-top: 20px;">
            Texten sparades.
        </div>
    }
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private string PreviewContent { get; set; } = string.Empty;

    private bool hasSaved = false; // Flag to track if save has been executed
    [Parameter] public bool SaveBtnClicked { get; set; } // New parameter to handle save button state
    [Parameter] public bool MultiPageMode { get; set; } // Receive MultiPageMode parameter

    private bool saveSuccessful = false;  // New flag to show the success message

    protected override void OnParametersSet()
    {
        if (SaveBtnClicked && !hasSaved) // Check if SaveBtnClicked and save hasn't been executed yet
        {
            SaveToDatabase(); // Call the save method
            hasSaved = true; // Set the flag to prevent further saves
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Load content only if ContentId exists (edit mode)
        if (ContentId.HasValue)
        {
            await LoadExistingContent(ContentId.Value);
        }
    }

    // A class representing the structure of the JSON data stored in the database
    private class ContentData
    {
        public string MarkdownContent = string.Empty;
    }

    private async Task LoadExistingContent(int contentId)
    {
        var existingContent = await ContentService.GetContentAsync(contentId);

        if (existingContent != null)
        {
            // Pre-fill form fields with existing content data
            ContentName = existingContent.ContentName;

            // Deserialize the ContentJson field to extract additional form data
            if (!string.IsNullOrEmpty(existingContent.ContentJson))
            {
                var contentData = JsonConvert.DeserializeObject<ContentData>(existingContent.ContentJson);
                MarkdownContent = contentData.MarkdownContent;
            }
        }
    }


    // Save all inputs to the database when the "Save" button is clicked
    private async Task SaveToDatabase()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();

        var contentData = new ContentData
        {
            MarkdownContent = MarkdownContent
        };

        var content = new Content
        {
            UserId = user.Id,
            ContentName = ContentName,
            WebPageId = WebPageId,
            CreationDate = DateOnly.FromDateTime(DateTime.Now),
            LastUpdated = DateOnly.FromDateTime(DateTime.Now),
            ContentJson = JsonConvert.SerializeObject(contentData),
            TemplateId = TemplateId,
        };

       
        // Check if we are creating new content or updating existing content
        if (ContentId.HasValue)
        {
            content.ContentId = ContentId.Value;

            // Load existing content to preserve the RenderingOrderPosition
            var existingContent = await ContentService.GetContentAsync(ContentId.Value);
            if (existingContent != null)
            {
                // Preserve the existing RenderingOrderPosition during the update
                content.RenderingOrderPosition = existingContent.RenderingOrderPosition;
            }

            await ContentService.UpdateContentAsync(content);
        }
        else
        {
            // Creating new content: Get the next rendering order position
            int nextRenderingOrderPosition = await ContentService.GetNextRenderingOrderAsync(WebPageId);
            content.RenderingOrderPosition = nextRenderingOrderPosition;

            await ContentService.SaveContentAsync(content);
        }
        saveSuccessful = true;

    }

    // Convert Markdown to HTML (for preview)
    private string ConvertMarkdownToHtml(string markdown)
    {
        return Markdig.Markdown.ToHtml(markdown); // Using Markdig for Markdown to HTML conversion
    }

    // Navigate to the contents page after saving
    private void Done()
    {
        NavigationManager.NavigateTo($"/contents?webpageid={WebPageId}");
    }
}
