@page "/WebSites/edit"
@using CMS.Shared
@attribute [Authorize]

@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Redigera webbsite</PageTitle>

<Breadcrumbs Crumbs="@(new List<(string, string)> 
    { 
        ("Hem", "/"), 
       // ("Websites", "/websites"),
        ("Redigera webbplats", $"/websites/edit?websiteid={WebSiteId}")
    })" />

<h1>Redigera webbsite</h1>

<h4>Hemsida</h4>
<hr />
@if (WebSite is null)
{
    <p><em>Laddar...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="WebSite" OnValidSubmit="UpdateWebSite" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="WebSite.WebSiteId" value="@WebSite.WebSiteId" />
                <div class="mb-3">
                    <label for="title" class="form-label">Titel:</label>
                    <InputText id="title" @bind-Value="WebSite.Title" class="form-control" />
                    <ValidationMessage For="() => WebSite.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Beskrivning:</label>
                    <InputText id="description" @bind-Value="WebSite.Description" class="form-control" />
                    <ValidationMessage For="() => WebSite.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="image" class="form-label">Bild:</label>
                    <InputText id="description" @bind-Value="WebSite.ImageUrl" class="form-control" />
                    <ValidationMessage For="() => WebSite.ImageUrl" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="creationdate" class="form-label">Skapad:</label>
                    <InputDate id="creationdate" @bind-Value="WebSite.CreationDate" class="form-control" disabled />
                    <ValidationMessage For="() => WebSite.CreationDate" class="text-danger" />
                </div>
                @* If the website has had no update yet then the form wont show *@
                @if (LastUpdatedDateTime.HasValue)
                {
                    <div class="mb-3">
                        <label for="lastupdated" class="form-label">Senast uppdaterad:</label>
                        <InputDate id="lastupdated" @bind-Value="LastUpdatedDateTime" class="form-control" disabled />
                        <ValidationMessage For="() => WebSite.LastUpdated" class="text-danger" />
                    </div>
                }
                @* Had to keep this in order for DOM to work but made it invisible to user *@
                <div class="mb-3" style="display: none;">
                    <label for="userid" class="form-label">Användar Id:</label>
                    <InputText id="userid" @bind-Value="WebSite.UserId" class="form-control" />
                    <ValidationMessage For="() => WebSite.UserId" class="text-danger" />
                </div>

                <SetLandingPage WebSiteId="@WebSiteId"/>

                <br />
                <button type="submit" class="btn btn-primary">Spara</button>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    public int WebSiteId { get; set; }

    [SupplyParameterFromForm]
    public WebSite? WebSite { get; set; }

    private DateTime? LastUpdatedDateTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        WebSite ??= await context.WebSites.FirstOrDefaultAsync(m => m.WebSiteId == WebSiteId);

        if (WebSite is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            // Bindings cant work with DateOnly so converting it to DateTime then back again in UpdateWebSite() function
            LastUpdatedDateTime = WebSite.LastUpdated.HasValue
                ? WebSite.LastUpdated.Value.ToDateTime(TimeOnly.MinValue)
                : null;
        }
    }

    public async Task UpdateWebSite()
    {
        using var context = DbFactory.CreateDbContext();

        var existingWebSite = await context.WebSites.FindAsync(WebSite!.WebSiteId);

        if (existingWebSite == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Endast följande fält skall sparas när UpdateWebSite() körs, detta är en fulfix för UpdateWebSite() alltid sätter LandingPage till null.
        existingWebSite.Title = WebSite.Title;
        existingWebSite.ImageUrl = WebSite.ImageUrl;
        existingWebSite.Description = WebSite.Description;
        existingWebSite.LastUpdated = DateOnly.FromDateTime(DateTime.Today);

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!WebSiteExists(WebSite.WebSiteId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        NavigationManager.NavigateTo("/websites");
    }


    bool WebSiteExists(int websiteid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.WebSites.Any(e => e.WebSiteId == websiteid);
    }
}